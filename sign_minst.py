# -*- coding: utf-8 -*-
"""Sign_Minst_Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SzVve7R6BJx9N7eO4HZ28wziTcGqPQCp
"""

#### Data set 1 - sign_mnist ####
#importing the models

import numpy as np
import pandas as pd
import plotly
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
import plotly.graph_objs as go
import plotly .offline as offline
import plotly.figure_factory as ff
import matplotlib.pyplot as plt
import umap

#reading the dataset

dataset = pd.read_csv(r'/content/drive/My Drive/sign_mnist.csv')
print(dataset.head())
print(dataset.shape)
print(dataset.info())
print(dataset.describe())

#Dividing the dataset into features and labels

X = dataset.drop(['label'], axis = 1) # Features
Y = dataset['label'] # Labels
print(type(X))
print(type(Y))
print(X.shape)
print(Y.shape)

# Normalizing numerical features so that each feature has mean 0 and variance 1
feature_scaler = StandardScaler()
X_scaled = feature_scaler.fit_transform(X)
pca = PCA(n_components = 2)
pca.fit(X_scaled)
x_pca = pca.transform(X_scaled)

# Dimentionality Reduction 
# 1) PCA
print("Variance explained by each of the n_components: ",pca.explained_variance_ratio_)
print("Total variance explained by the n_components: ",sum(pca.explained_variance_ratio_))
digits=list(dataset['label'])
data = [go.Scatter(x=x_pca[:,0], y=x_pca[:,1], mode='markers',
                    marker = dict(color=Y, colorscale='Rainbow', opacity=0.5),
                                text=[f'digit: {a}' for a in digits],
                                hoverinfo='text')]

layout = go.Layout(title = 'PCA Dimensionality Reduction', width = 700, height = 700,template='plotly_dark',
                    xaxis = dict(title='First Principal Component'),
                    yaxis = dict(title='Second Principal Component'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='pca.html')

# 2) T-Sne

tsne = TSNE(n_components = 2, perplexity = 100, n_iter = 3000)
x_tsne = tsne.fit_transform(X_scaled)

data = [go.Scatter(x=x_tsne[:,0], y=x_tsne[:,1], mode='markers',
                    marker = dict(color=Y, colorscale='Rainbow', opacity=0.5),
                                text=[f'digit: {a}' for a in digits],
                                hoverinfo='text')]

layout = go.Layout(title = 't-SNE Dimensionality Reduction', width = 700, height = 700,template='plotly_dark',
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='t-SNE.html')

# Implementing UMAP to visualize dataset
u = umap.UMAP(n_neighbors=60, min_dist=0.8)
x_umap = u.fit_transform(X_scaled)
digits=list(dataset['label'])
data = [go.Scatter(x=x_umap[:,0], y=x_umap[:,1], mode='markers',
                    marker = dict(color=Y, colorscale='Rainbow', opacity=0.5),
                                text=[f'digit: {a}' for a in digits],
                                hoverinfo='text')]

layout = go.Layout(title = 'UMAP Dimensionality Reduction', width = 700, height = 700, template='plotly_dark',
                    xaxis = dict(title='First Dimension'), 
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='umap2d.html')

# Implementing UMAP to visualize dataset (3d)
u = umap.UMAP(metric= 'euclidean', n_neighbors=60, min_dist=0.8)
x_umap = u.fit_transform(X_scaled)

data = [go.Scatter3d(x=x_umap[:,0], y=x_umap[:,1],z=x_umap[:,1], mode='markers',
                    marker = dict(color=Y, colorscale='Rainbow', opacity=0.5),
                                text=[f'digit: {a}' for a in digits],
                                hoverinfo='text')]

layout = go.Layout(title = 'UMAP Dimensionality Reduction', width = 700, height = 700, template='plotly_dark', 
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='umap3d.html')


